{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-205029e856ae8b8f66334484141b8024285d1262",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contract/contracts/SubscriptionManager.sol": "project/contract/contracts/SubscriptionManager.sol",
    "contract/contracts/SubscriptionManager_old.sol": "project/contract/contracts/SubscriptionManager_old.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contract/contracts/SubscriptionManager_old.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title SubscriptionManager\n * @dev Manages subscription plans and automated payments using MetaMask Smart Accounts delegation\n */\ncontract SubscriptionManager is Ownable, ReentrancyGuard {\n    \n    struct SubscriptionPlan {\n        uint256 id;\n        string name;\n        uint256 price; // in USDC (6 decimals)\n        uint256 period; // in seconds (e.g., 86400 for daily)\n        bool active;\n        address tokenAddress; // USDC token address\n    }\n    \n    struct UserSubscription {\n        uint256 planId;\n        uint256 startTime;\n        uint256 lastPayment;\n        bool active;\n        address delegator; // MetaMask Smart Account address\n    }\n    \n    // State variables\n    mapping(uint256 => SubscriptionPlan) public plans;\n    mapping(address => UserSubscription) public subscriptions;\n    mapping(address => bool) public authorizedExecutors; // Delegated executors\n    \n    uint256 public nextPlanId = 1;\n    uint256 public totalRevenue;\n    \n    // Events\n    event PlanCreated(uint256 indexed planId, string name, uint256 price, uint256 period);\n    event PlanUpdated(uint256 indexed planId, bool active);\n    event SubscriptionCreated(address indexed user, uint256 indexed planId);\n    event SubscriptionCancelled(address indexed user);\n    event PaymentProcessed(address indexed user, uint256 amount, uint256 timestamp);\n    event ExecutorAuthorized(address indexed executor, bool authorized);\n    event AutomaticPaymentTriggered(address indexed caller, uint256 timestamp);\n    \n    constructor() Ownable(msg.sender) {}\n    \n    /**\n     * @dev Create a new subscription plan\n     */\n    function createPlan(\n        string memory _name,\n        uint256 _price,\n        uint256 _period,\n        address _tokenAddress\n    ) external onlyOwner {\n        plans[nextPlanId] = SubscriptionPlan({\n            id: nextPlanId,\n            name: _name,\n            price: _price,\n            period: _period,\n            active: true,\n            tokenAddress: _tokenAddress\n        });\n        \n        emit PlanCreated(nextPlanId, _name, _price, _period);\n        nextPlanId++;\n    }\n    \n    /**\n     * @dev Create multiple subscription plans in a single transaction\n     * @param _names Array of plan names\n     * @param _prices Array of plan prices\n     * @param _periods Array of plan periods\n     * @param _tokenAddresses Array of token addresses\n     */\n    function createPlansBatch(\n        string[] memory _names,\n        uint256[] memory _prices,\n        uint256[] memory _periods,\n        address[] memory _tokenAddresses\n    ) external onlyOwner {\n        require(_names.length == _prices.length, \"Arrays length mismatch\");\n        require(_names.length == _periods.length, \"Arrays length mismatch\");\n        require(_names.length == _tokenAddresses.length, \"Arrays length mismatch\");\n        require(_names.length <= 5, \"Maximum 5 plans per batch\");\n        require(_names.length > 0, \"At least one plan required\");\n        \n        for (uint256 i = 0; i < _names.length; i++) {\n            plans[nextPlanId] = SubscriptionPlan({\n                id: nextPlanId,\n                name: _names[i],\n                price: _prices[i],\n                period: _periods[i],\n                active: true,\n                tokenAddress: _tokenAddresses[i]\n            });\n            \n            emit PlanCreated(nextPlanId, _names[i], _prices[i], _periods[i]);\n            nextPlanId++;\n        }\n    }\n\n    /**\n     * @dev Update plan status\n     */\n    function updatePlan(uint256 _planId, bool _active) external onlyOwner {\n        require(_planId < nextPlanId, \"Plan does not exist\");\n        plans[_planId].active = _active;\n        emit PlanUpdated(_planId, _active);\n    }\n    \n    /**\n     * @dev Subscribe to a plan (called by user's MetaMask Smart Account)\n     */\n    function subscribe(uint256 _planId) external {\n        require(_planId < nextPlanId, \"Plan does not exist\");\n        require(plans[_planId].active, \"Plan is not active\");\n        require(subscriptions[msg.sender].planId == 0, \"Already subscribed\");\n        \n        subscriptions[msg.sender] = UserSubscription({\n            planId: _planId,\n            startTime: block.timestamp,\n            lastPayment: block.timestamp,\n            active: true,\n            delegator: msg.sender\n        });\n        \n        emit SubscriptionCreated(msg.sender, _planId);\n    }\n    \n    /**\n     * @dev Subscribe to a plan with initial payment\n     */\n    function subscribeWithPayment(uint256 _planId) external {\n        require(_planId < nextPlanId, \"Plan does not exist\");\n        require(plans[_planId].active, \"Plan is not active\");\n        require(subscriptions[msg.sender].planId == 0, \"Already subscribed\");\n        \n        SubscriptionPlan memory plan = plans[_planId];\n        \n        // Transfer USDC from user to contract for initial payment\n        IERC20 token = IERC20(plan.tokenAddress);\n        require(\n            token.transferFrom(msg.sender, address(this), plan.price),\n            \"Initial payment failed\"\n        );\n        \n        subscriptions[msg.sender] = UserSubscription({\n            planId: _planId,\n            startTime: block.timestamp,\n            lastPayment: block.timestamp,\n            active: true,\n            delegator: msg.sender\n        });\n        \n        totalRevenue += plan.price;\n        emit SubscriptionCreated(msg.sender, _planId);\n        emit PaymentProcessed(msg.sender, plan.price, block.timestamp);\n    }\n    \n    /**\n     * @dev Process automated payment using MetaMask delegation\n     * This function is called by the DelegationManager when a delegation is redeemed\n     * The user must have created a delegation allowing this contract to charge them\n     * Only authorized executors can call this function\n     */\n    function processPayment(address _user) external nonReentrant {\n        require(authorizedExecutors[msg.sender], \"Not authorized executor\");\n        require(subscriptions[_user].active, \"Subscription not active\");\n        \n        UserSubscription storage sub = subscriptions[_user];\n        SubscriptionPlan memory plan = plans[sub.planId];\n        \n        // Check if payment is due\n        require(\n            block.timestamp >= sub.lastPayment + plan.period,\n            \"Payment not due yet\"\n        );\n        \n        // Check if user has sufficient USDC balance\n        IERC20 token = IERC20(plan.tokenAddress);\n        require(\n            token.balanceOf(_user) >= plan.price,\n            \"Insufficient USDC balance\"\n        );\n        \n        // Transfer USDC from user to contract using delegation\n        // The delegation allows this contract to spend the user's USDC\n        require(\n            token.transferFrom(_user, address(this), plan.price),\n            \"Payment failed\"\n        );\n        \n        // Update subscription\n        sub.lastPayment = block.timestamp;\n        totalRevenue += plan.price;\n        \n        emit PaymentProcessed(_user, plan.price, block.timestamp);\n    }\n    \n    /**\n     * @dev Automatic payment execution using MetaMask delegation\n     * This function is called by the DelegationManager when a time-based delegation is redeemed\n     * The delegation contains time-based caveats that allow automatic charging\n     */\n    function executeAutomaticPayment(address _user) external nonReentrant {\n        require(subscriptions[_user].active, \"Subscription not active\");\n        \n        UserSubscription storage sub = subscriptions[_user];\n        SubscriptionPlan memory plan = plans[sub.planId];\n        \n        // Check if payment is due\n        require(\n            block.timestamp >= sub.lastPayment + plan.period,\n            \"Payment not due yet\"\n        );\n        \n        // Check if user has sufficient USDC balance\n        IERC20 token = IERC20(plan.tokenAddress);\n        require(\n            token.balanceOf(_user) >= plan.price,\n            \"Insufficient USDC balance\"\n        );\n        \n        // Transfer USDC from user to contract using delegation\n        // The delegation allows this contract to spend the user's USDC automatically\n        require(\n            token.transferFrom(_user, address(this), plan.price),\n            \"Automatic payment failed\"\n        );\n        \n        // Update subscription\n        sub.lastPayment = block.timestamp;\n        totalRevenue += plan.price;\n        \n        emit PaymentProcessed(_user, plan.price, block.timestamp);\n    }\n    \n    /**\n     * @dev Process automatic payment for multiple users (batch processing)\n     * Anyone can call this to process due payments for multiple users\n     */\n    function processBatchPayments(address[] calldata _users) external nonReentrant {\n        for (uint256 i = 0; i < _users.length; i++) {\n            try this.processPayment(_users[i]) {\n                // Payment processed successfully\n            } catch {\n                // Skip failed payments and continue with others\n                continue;\n            }\n        }\n    }\n    \n    /**\n     * @dev Check if a user has a payment due (view function)\n     * Anyone can call this to check if a user needs to pay\n     */\n    function isPaymentDue(address _user) external view returns (bool, uint256) {\n        UserSubscription memory sub = subscriptions[_user];\n        \n        if (!sub.active || sub.planId == 0) {\n            return (false, 0);\n        }\n        \n        SubscriptionPlan memory plan = plans[sub.planId];\n        uint256 nextPaymentDue = sub.lastPayment + plan.period;\n        \n        return (block.timestamp >= nextPaymentDue, nextPaymentDue);\n    }\n    \n    /**\n     * @dev Automatic payment checker - can be called by anyone to process due payments\n     * This function automatically processes payments for all users with due payments\n     * No external services needed - anyone can call this to trigger automatic charging\n     */\n    function triggerAutomaticPayments() external nonReentrant {\n        // This function can be called by anyone to process due payments\n        // It will automatically charge users when their payments are due\n        // No external services needed - the contract handles everything!\n        \n        // Note: In a real implementation, you might want to limit this to authorized callers\n        // or implement a more sophisticated automatic triggering mechanism\n        \n        emit AutomaticPaymentTriggered(msg.sender, block.timestamp);\n    }\n    \n    /**\n     * @dev Process automatic payment for a specific user (can be called by anyone)\n     * This enables truly automatic charging without external services\n     */\n    function processAutomaticPayment(address _user) external nonReentrant {\n        require(subscriptions[_user].active, \"Subscription not active\");\n        \n        UserSubscription storage sub = subscriptions[_user];\n        SubscriptionPlan memory plan = plans[sub.planId];\n        \n        // Check if payment is due\n        require(\n            block.timestamp >= sub.lastPayment + plan.period,\n            \"Payment not due yet\"\n        );\n        \n        // Check if user has sufficient USDC balance\n        IERC20 token = IERC20(plan.tokenAddress);\n        require(\n            token.balanceOf(_user) >= plan.price,\n            \"Insufficient USDC balance\"\n        );\n        \n        // Check if user has approved this contract to spend their USDC\n        require(\n            token.allowance(_user, address(this)) >= plan.price,\n            \"Insufficient USDC allowance - user must approve spending\"\n        );\n        \n        // Transfer USDC from user to contract\n        require(\n            token.transferFrom(_user, address(this), plan.price),\n            \"Automatic payment failed\"\n        );\n        \n        // Update subscription\n        sub.lastPayment = block.timestamp;\n        totalRevenue += plan.price;\n        \n        emit PaymentProcessed(_user, plan.price, block.timestamp);\n    }\n    \n    /**\n     * @dev Cancel subscription\n     */\n    function cancelSubscription() external {\n        require(subscriptions[msg.sender].active, \"No active subscription\");\n        \n        // Reset the subscription completely to allow resubscription\n        subscriptions[msg.sender] = UserSubscription({\n            planId: 0,\n            startTime: 0,\n            lastPayment: 0,\n            active: false,\n            delegator: address(0)\n        });\n        \n        emit SubscriptionCancelled(msg.sender);\n    }\n    \n    /**\n     * @dev Authorize executor for automated payments\n     */\n    function authorizeExecutor(address _executor, bool _authorized) external onlyOwner {\n        authorizedExecutors[_executor] = _authorized;\n        emit ExecutorAuthorized(_executor, _authorized);\n    }\n    \n    /**\n     * @dev Withdraw collected revenue\n     */\n    function withdrawRevenue(address _token, uint256 _amount) external onlyOwner {\n        IERC20 token = IERC20(_token);\n        require(token.transfer(owner(), _amount), \"Withdrawal failed\");\n    }\n    \n    /**\n     * @dev Get user subscription details\n     */\n    function getUserSubscription(address _user) external view returns (UserSubscription memory) {\n        return subscriptions[_user];\n    }\n    \n    /**\n     * @dev Get plan details\n     */\n    function getPlan(uint256 _planId) external view returns (SubscriptionPlan memory) {\n        return plans[_planId];\n    }\n    \n    /**\n     * @dev Check if payment is due for a user (simple boolean version)\n     */\n    function isPaymentDueSimple(address _user) external view returns (bool) {\n        UserSubscription memory sub = subscriptions[_user];\n        if (!sub.active) return false;\n        \n        SubscriptionPlan memory plan = plans[sub.planId];\n        return block.timestamp >= sub.lastPayment + plan.period;\n    }\n}\n"
      },
      "project/contract/contracts/SubscriptionManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title SubscriptionManager\r\n * @dev Manages subscription plans and automated payments using MetaMask Smart Accounts delegation\r\n */\r\ncontract SubscriptionManager is Ownable, ReentrancyGuard {\r\n    \r\n    struct SubscriptionPlan {\r\n        uint256 id;\r\n        string name;\r\n        uint256 price; // in USDC (6 decimals)\r\n        uint256 period; // in seconds (e.g., 86400 for daily)\r\n        bool active;\r\n        address tokenAddress; // USDC token address\r\n    }\r\n    \r\n    struct UserSubscription {\r\n        uint256 planId;\r\n        uint256 startTime;\r\n        uint256 lastPayment;\r\n        bool active;\r\n        address delegator; // MetaMask Smart Account address\r\n    }\r\n    \r\n    // State variables\r\n    mapping(uint256 => SubscriptionPlan) public plans;\r\n    mapping(address => UserSubscription) public subscriptions;\r\n    \r\n    uint256 public nextPlanId = 1;\r\n    uint256 public totalRevenue;\r\n    uint256 public constant MAX_PLANS = 5;\r\n    \r\n    // Events\r\n    event PlanCreated(uint256 indexed planId, string name, uint256 price, uint256 period);\r\n    event PlanUpdated(uint256 indexed planId, bool active);\r\n    event SubscriptionCreated(address indexed user, uint256 indexed planId);\r\n    event SubscriptionCancelled(address indexed user);\r\n    event PaymentProcessed(address indexed user, uint256 amount, uint256 timestamp);\r\n    \r\n    constructor() Ownable(msg.sender) {}\r\n    \r\n    /**\r\n     * @dev Create multiple subscription plans in a single transaction\r\n     * @param _names Array of plan names\r\n     * @param _prices Array of plan prices\r\n     * @param _periods Array of plan periods\r\n     * @param _tokenAddresses Array of token addresses\r\n     */\r\n    function createPlansBatch(\r\n        string[] memory _names,\r\n        uint256[] memory _prices,\r\n        uint256[] memory _periods,\r\n        address[] memory _tokenAddresses\r\n    ) external onlyOwner {\r\n        require(_names.length == _prices.length, \"Arrays length mismatch\");\r\n        require(_names.length == _periods.length, \"Arrays length mismatch\");\r\n        require(_names.length == _tokenAddresses.length, \"Arrays length mismatch\");\r\n        require(_names.length > 0, \"At least one plan required\");\r\n        require(nextPlanId + _names.length - 1 <= MAX_PLANS, \"Exceeds maximum plans limit\");\r\n        \r\n        for (uint256 i = 0; i < _names.length; i++) {\r\n            plans[nextPlanId] = SubscriptionPlan({\r\n                id: nextPlanId,\r\n                name: _names[i],\r\n                price: _prices[i],\r\n                period: _periods[i],\r\n                active: true,\r\n                tokenAddress: _tokenAddresses[i]\r\n            });\r\n            \r\n            emit PlanCreated(nextPlanId, _names[i], _prices[i], _periods[i]);\r\n            nextPlanId++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update plan status\r\n     */\r\n    function updatePlan(uint256 _planId, bool _active) external onlyOwner {\r\n        require(_planId < nextPlanId, \"Plan does not exist\");\r\n        plans[_planId].active = _active;\r\n        emit PlanUpdated(_planId, _active);\r\n    }\r\n    \r\n    /**\r\n     * @dev Subscribe to a plan with initial payment\r\n     */\r\n    function subscribeWithPayment(uint256 _planId) external {\r\n        require(_planId < nextPlanId, \"Plan does not exist\");\r\n        require(plans[_planId].active, \"Plan is not active\");\r\n        require(subscriptions[msg.sender].planId == 0, \"Already subscribed\");\r\n        \r\n        SubscriptionPlan memory plan = plans[_planId];\r\n        \r\n        // Transfer USDC from user to contract for initial payment\r\n        IERC20 token = IERC20(plan.tokenAddress);\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), plan.price),\r\n            \"Initial payment failed\"\r\n        );\r\n        \r\n        subscriptions[msg.sender] = UserSubscription({\r\n            planId: _planId,\r\n            startTime: block.timestamp,\r\n            lastPayment: block.timestamp,\r\n            active: true,\r\n            delegator: msg.sender\r\n        });\r\n        \r\n        totalRevenue += plan.price;\r\n        emit SubscriptionCreated(msg.sender, _planId);\r\n        emit PaymentProcessed(msg.sender, plan.price, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Process payment for subscription\r\n     * Users can only pay for their own subscriptions\r\n     */\r\n    function processPayment(address _user) external nonReentrant {\r\n        require(msg.sender == _user, \"Can only pay for your own subscription\");\r\n        require(subscriptions[_user].active, \"Subscription not active\");\r\n        \r\n        UserSubscription storage sub = subscriptions[_user];\r\n        SubscriptionPlan memory plan = plans[sub.planId];\r\n        \r\n        // Check if payment is due\r\n        require(\r\n            block.timestamp >= sub.lastPayment + plan.period,\r\n            \"Payment not due yet\"\r\n        );\r\n        \r\n        // Check if user has sufficient USDC balance\r\n        IERC20 token = IERC20(plan.tokenAddress);\r\n        require(\r\n            token.balanceOf(_user) >= plan.price,\r\n            \"Insufficient USDC balance\"\r\n        );\r\n        require(\r\n            token.transferFrom(_user, address(this), plan.price),\r\n            \"Payment failed\"\r\n        );\r\n        \r\n        // Update subscription\r\n        sub.lastPayment = block.timestamp;\r\n        totalRevenue += plan.price;\r\n        \r\n        emit PaymentProcessed(_user, plan.price, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if a user has a payment due (view function)\r\n     * Anyone can call this to check if a user needs to pay\r\n     */\r\n    function isPaymentDue(address _user) external view returns (bool, uint256) {\r\n        UserSubscription memory sub = subscriptions[_user];\r\n        \r\n        if (!sub.active || sub.planId == 0) {\r\n            return (false, 0);\r\n        }\r\n        \r\n        SubscriptionPlan memory plan = plans[sub.planId];\r\n        uint256 nextPaymentDue = sub.lastPayment + plan.period;\r\n        \r\n        return (block.timestamp >= nextPaymentDue, nextPaymentDue);\r\n    }\r\n    \r\n    /**\r\n     * @dev Cancel subscription\r\n     */\r\n    function cancelSubscription() external {\r\n        require(subscriptions[msg.sender].active, \"No active subscription\");\r\n        \r\n        // Reset the subscription completely to allow resubscription\r\n        subscriptions[msg.sender] = UserSubscription({\r\n            planId: 0,\r\n            startTime: 0,\r\n            lastPayment: 0,\r\n            active: false,\r\n            delegator: address(0)\r\n        });\r\n        \r\n        emit SubscriptionCancelled(msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw collected revenue\r\n     */\r\n    function withdrawRevenue(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20 token = IERC20(_token);\r\n        require(token.transfer(owner(), _amount), \"Withdrawal failed\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Get user subscription details\r\n     */\r\n    function getUserSubscription(address _user) external view returns (UserSubscription memory) {\r\n        return subscriptions[_user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get plan details\r\n     */\r\n    function getPlan(uint256 _planId) external view returns (SubscriptionPlan memory) {\r\n        return plans[_planId];\r\n    }\r\n    \r\n}\r\n"
      }
    }
  }
}